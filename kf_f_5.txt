/*1*/
fun main(args: Array<String>)
{
    var stud: Student = Student(822201)
    var ex: Array<String> = arrayOf("Механика", "Программирование")
    var marks: Array<Int> = arrayOf(2, 9)
    stud.setExams(ex, marks)
    println(stud.toString())
}

open class  Student(id: Int)       - Класс студент
{
    private var id: Int = id        - id
    private var exams: Array<ExamsResult> = emptyArray()       -Масс. экзамены

    private inner class ExamsResult(name: String){      - внутренний класс
        private var name: String = name     -Имя экзамена
        private var mark: Int = 0       - баллы 
        private var passed: Boolean = false      - сдан не здан

        open fun passExam(){        - функция  задающая сдачу экзаменна
            passed = true
        }

        open fun setMark(mark: Int){        - функция  устанавливающая оценку
            this.mark = mark
        }

        open fun getMark() = mark       -функция  возвращающая оценку

        open fun getPassedMark() : Int{     -функция  возвращающая минимальную оценку для прохождения экзамена
            val PASSED_MARK: Int = 4;
            return PASSED_MARK
        }

        open fun getName() = name       -функция  получения имени экзамена
        open fun isPassed() = passed        -функция  получающая  состояние экзамена

    }

    open fun setExams(name: Array<String>, marks: Array<Int>){      -функция  установки экзаменов (принимает массивы: названий и оценок экзаменов)
        if (name.size != marks.size)        
            throw IllegalArgumentException()        - выведит ошибку если массивы названий и оценок экзаменов разного размера
        exams = Array(name.size) { ExamsResult("null") }    - определяет массив пустых элементов экзаменов с размером полученным из массивов (name: Array<String>, marks: Array<Int>)
        for (i in name.indices) //цикл от 0 до конца массива
        {
            exams.set(i, ExamsResult(name[i]))   - задаем имя экзамена
            exams[i].setMark(marks[i])      -  задаем оценку экзамена
            if (exams[i].getMark() >= exams[i].getPassedMark())     - если оценка больше или равна минимальной требуемой
                exams[i].passExam()     - то устанавливаем экзамен как сданный
        }
    }

    open override fun toString(): String {      - замена стандартной функции toString
        var res: String = "Студетн: $id\n"      - объявляем строку которую будем вводить
        for (i in exams.indices)        -перебираем весь массив экзаменов
        {
            if (exams[i].isPassed())  
                res += exams[i].getName() + " сдал \n" -пишет если экзамен сдан
            else
                res += exams[i].getName() + " не сдал \n"- пишет если экзамен не сдан
        }
        return res     - возвращает строку
    }

}

/*2*/

fun main(args: Array<String>) {

    
    Ship.LifeBoat.down() -вызов статического метода

    -создание объекта статического класса
    val lf = Ship.LifeBoat() -вызов обычного метода
    lf.swim()
}


open class Ship {
    private val id = 0

    class LifeBoat {
        fun swim() {
            println("отплытие шлюпки")
        }

        companion object {
            fun down() {
                println("шлюпки на воду!")
            }
        }
    }

}
/*4*/
/прямоугольник/
class Rectangle(val width: Float, val height: Float) : Figure()
{override fun perimeter(): Float{
        return width * 2 + height * 2;
    }
override fun area(): Float{
        return width * height;
    }
}
/треугольник/
class Treugol(val height: Float, val a:Float,val b:Float,val c:Float):Figure(){
override fun perimeter(): Float{
return a+b+c
}
override fun area(): Float{
return (a*height)/2
}
/трапеция/
class Trapeciya(val height: Float, val a:Float,val b:Float,val c:Float,val d:Float):Figure(){
override fun perimeter(): Float{
return a+b+c+d
}
override fun area(): Float{
return ((a+b)/2)height

}